{"version":3,"sources":["Top.js","App.js","serviceWorker.js","index.js"],"names":["Top","React","Component","App","props","state","rounds_completed","rounds_remaining","CenteredGrid","rCompleted","rRemaining","Grid","container","justify","alignItems","style","padding","item","xs","component","Card","className","useStyles","roundStatusCard","variant","CardContent","Typography","memberStatusCard","Button","onClick","setState","backgroundColor","margin","this","makeStyles","theme","root","border","meetingRowCard","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8PAWeA,E,uKANb,OACC,+C,GAJeC,IAAMC,W,wDCalBC,G,wDAEJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,iBAAkB,EAClBC,iBAAkB,GAJH,E,qDAQT,IAAD,OACDC,EAAe,SAAC,GAAD,IAAEC,EAAF,EAAEA,WAAYC,EAAd,EAAcA,WAAd,OACnB,6BAEE,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,eAAeC,WAAW,UAAUC,MAAO,CAACC,QAAS,SAC3E,kBAACL,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,EAAGC,UAAWC,IAAMC,UAAWC,IAAYC,gBAAiBC,QAAQ,YACjF,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYF,QAAQ,QAAQL,UAAU,KAAtC,qBACqBV,EACnB,6BAFF,qBAGqBC,KAIzB,kBAACC,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,EAAGC,UAAWC,IAAMC,UAAWC,IAAYK,iBAAkBH,QAAQ,YAClF,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYF,QAAQ,QAAQL,UAAU,KAAtC,iBAKJ,kBAACR,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,EAAGC,UAAWC,IAAMC,UAAWC,IAAYK,iBAAkBH,QAAQ,YAClF,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYF,QAAQ,QAAQL,UAAU,KAAtC,uBAON,kBAACR,EAAA,EAAD,CAAMC,WAAS,EAACK,MAAI,EAACJ,QAAQ,SAASC,WAAW,UAC/C,kBAACH,EAAA,EAAD,CAAMM,MAAI,GACR,kBAACW,EAAA,EAAD,CAAQC,QAAS,WAAQ,EAAKC,SAAS,CAACxB,iBAAkBG,EAAW,KACnEe,QAAQ,WAAWT,MAAO,CAACgB,gBAAiB,UAAWC,OAAQ,SADjE,mBAUR,OACE,yBAAKX,UAAU,OACb,kBAAC,EAAD,MACA,kBAACb,EAAD,CAAcC,WAAYwB,KAAK5B,MAAMC,iBAAkBI,WAAYuB,KAAK5B,MAAME,wB,GAvDpEN,IAAMC,YA6DlBoB,EAAYY,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,GAGNb,gBAAiB,CACfQ,gBAAgB,UAChBM,OAAQ,mBAEVV,iBAAkB,CAChBI,gBAAgB,UAChBM,OAAQ,mBAEVC,eAAgB,CACdN,OAAQ,MACRK,OAAQ,kBACRN,gBAAgB,aAIL5B,ICnFKoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3c298516.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass Top extends React.Component {\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<p> * Meeter * </p>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Top","import React from 'react';\r\nimport Top from './Top'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport './App.css';\r\n\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport randomColor from 'randomcolor';\r\n\r\n//<Grid item xs={6}>\r\n //       <div style={{background:randomColor()}}>Hooray something is here!</div>\r\n //     </Grid>\r\nclass App extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      rounds_completed: 0,\r\n      rounds_remaining: 0\r\n    };\r\n  }\r\n  \r\n  render() {\r\n    const CenteredGrid = ({rCompleted, rRemaining}) => (\r\n      <div>\r\n\r\n        <Grid container justify=\"space-evenly\" alignItems=\"stretch\" style={{padding: '24px'}}>\r\n          <Grid item xs={3} component={Card} className={useStyles().roundStatusCard} variant=\"outlined\">\r\n            <CardContent>\r\n              <Typography variant=\"body2\" component=\"p\">\r\n                Rounds Completed: {rCompleted}\r\n                <br />\r\n                Rounds Remaining: {rRemaining}\r\n              </Typography>\r\n            </CardContent>\r\n          </Grid>\r\n          <Grid item xs={3} component={Card} className={useStyles().memberStatusCard} variant=\"outlined\">\r\n            <CardContent>\r\n              <Typography variant=\"body2\" component=\"p\">\r\n                New Members\r\n              </Typography>\r\n            </CardContent>\r\n          </Grid>\r\n          <Grid item xs={3} component={Card} className={useStyles().memberStatusCard} variant=\"outlined\">\r\n            <CardContent>\r\n              <Typography variant=\"body2\" component=\"p\">\r\n                Existing Members\r\n              </Typography>\r\n            </CardContent>\r\n          </Grid>\r\n        </Grid>\r\n    \r\n        <Grid container item justify=\"center\" alignItems=\"center\">\r\n          <Grid item>\r\n            <Button onClick={() => { this.setState({rounds_completed: rCompleted+1})}}\r\n              variant=\"outlined\" style={{backgroundColor: \"#82E0AA\", margin: \"10px\"}} >\r\n              Start Round\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n    \r\n      </div>\r\n    );\r\n\r\n    return(\r\n      <div className=\"App\">\r\n        <Top />\r\n        <CenteredGrid rCompleted={this.state.rounds_completed} rRemaining={this.state.rounds_remaining}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \r\n  },\r\n  roundStatusCard: {\r\n    backgroundColor:\"#8DC6F6\",\r\n    border: \"1px solid black\"\r\n  },\r\n  memberStatusCard: {\r\n    backgroundColor:\"#D19BE8\",\r\n    border: \"1px solid black\"\r\n  },\r\n  meetingRowCard: {\r\n    margin: \"6px\",\r\n    border: \"1px solid black\",\r\n    backgroundColor:\"white\"\r\n  },\r\n}));\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}